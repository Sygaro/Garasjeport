./cleanup_old_logging_and_apply_new.py:15: r"log_\w+\(.*?\)",  # funksjonskall som log_status(), log_action() osv. => r"log_\w+\(.*?\)",  # funksjonskall som get_logger().info(), log_action() osv.
./utils/system_monitor.py:9: from utils.garage_logger import GarageLogger => # Fjernet gammel import
./utils/garage_logger.py:2: from utils.logger_factory import get_logger as _get_internal_logger => # Fjernet gammel import
./utils/garage_logger.py:12: def log_status(self, context, message): => def get_logger(self, context, message).info(self, context, message):
./utils/garage_logger.py:15: def log_error(self, context, message): => def get_logger(self, context, message).error(self, context, message):
./utils/garage_logger.py:18: def log_action(self, port, action, source="api", result="success"): => def get_logger(self, port, action, source="api", result="success").info(self, port, action, source="api", result="success"):
./utils/garage_logger.py:22: def log_timing(self, context, timing_data): => def get_logger(self, context, timing_data).info(self, context, timing_data):
./utils/garage_logger.py:25: def log_sensor_data(self, context, message): => def get_logger(self, context, message).info(self, context, message):
./utils/garage_logger.py:28: def log_debug(self, context, message): => def get_logger(self, context, message).debug(self, context, message):
./utils/relay_control.py:14: logger (obj, optional): Logger med .log_debug() eller .log_action(), hvis tilgjengelig => logger (obj, optional): Logger med .log_debug() eller .get_logger().info(), hvis tilgjengelig
./utils/relay_control.py:20: logger.log_error("relay", msg) => logger.get_logger("relay", msg).error("relay", msg)
./utils/relay_control.py:27: logger.log_debug("relay", f"Sender puls til {port} (GPIO {pin}) i {pulse_duration:.2f}s") => logger.get_logger("relay", f"Sender puls til {port} (GPIO {pin}).debug("relay", f"Sender puls til {port} (GPIO {pin}) i {pulse_duration:.2f}s")
./utils/sensor_monitor.py:4: from utils.garage_logger import get_logger => # Fjernet gammel import
./utils/sensor_monitor.py:40: self.logger.log_debug("sensor_monitor", "Callback-funksjon registrert") => self.logger.get_logger("sensor_monitor", "Callback-funksjon registrert").debug("sensor_monitor", "Callback-funksjon registrert")
./utils/sensor_monitor.py:61: self.logger.log_error("sensor_monitor", f"Feil ved registrering av callback på GPIO {gpio}: {e}") => self.logger.get_logger("sensor_monitor", f"Feil ved registrering av callback på GPIO {gpio}: {e}").error("sensor_monitor", f"Feil ved registrering av callback på GPIO {gpio}: {e}")
./utils/sensor_monitor.py:98: self.logger.log_debug("sensor_monitor", "Alle sensor-callbacks er deaktivert og fjernet") => self.logger.get_logger("sensor_monitor", "Alle sensor-callbacks er deaktivert og fjernet").debug("sensor_monitor", "Alle sensor-callbacks er deaktivert og fjernet")
./utils/bootstrap_logger.py:24: def log_status(context: str, message: str): => def get_logger(context: str, message: str).info(context: str, message: str):
./utils/bootstrap_logger.py:27: def log_error(context: str, message: str): => def get_logger(context: str, message: str).error(context: str, message: str):
./utils/bootstrap_logger.py:35: def log_status(self, context, message): => def get_logger(self, context, message).info(self, context, message):
./utils/bootstrap_logger.py:36: log_status(context, message) => get_logger(context, message).info(context, message)
./utils/bootstrap_logger.py:38: def log_error(self, context, message): => def get_logger(self, context, message).error(self, context, message):
./utils/bootstrap_logger.py:39: log_error(context, message) => get_logger(context, message).error(context, message)
./utils/logging/unified_logger.py:32: def log_status(self, message): => def get_logger(self, message).info(self, message):
./utils/logging/unified_logger.py:35: def log_error(self, message): => def get_logger(self, message).error(self, message):
./utils/logging/unified_logger.py:38: def log_action(self, port, action, source="api", result="success"): => def get_logger(self, port, action, source="api", result="success").info(self, port, action, source="api", result="success"):
./utils/logging/unified_logger.py:42: def log_timing(self, timing_data): => def get_logger(self, timing_data).info(self, timing_data):
./controllers/logger_controller.py:6: from utils.garage_logger import GarageLogger => # Fjernet gammel import
./routes/api/sensor_routes.py:7: from utils.garage_logger import get_logger => # Fjernet gammel import
./routes/api/sensor_routes.py:27: logger.log_error("sensor_routes", f"Feil i /sensors/environment/latest: {str(e)}") => logger.get_logger("sensor_routes", f"Feil i /sensors/environment/latest: {str(e).error("sensor_routes", f"Feil i /sensors/environment/latest: {str(e)}")
./routes/api/sensor_routes.py:65: logger.log_error("sensor_routes", f"Feil i /sensors/environment/history: {str(e)}") => logger.get_logger("sensor_routes", f"Feil i /sensors/environment/history: {str(e).error("sensor_routes", f"Feil i /sensors/environment/history: {str(e)}")
./routes/api/sensor_routes.py:97: logger.log_error("sensor_routes", f"Feil i /sensors/environment/averages: {str(e)}") => logger.get_logger("sensor_routes", f"Feil i /sensors/environment/averages: {str(e).error("sensor_routes", f"Feil i /sensors/environment/averages: {str(e)}")
./routes/api/sensor_routes.py:109: logger.log_error("sensor_routes", f"Feil i GET /sensors/environment/logging: {str(e)}") => logger.get_logger("sensor_routes", f"Feil i GET /sensors/environment/logging: {str(e).error("sensor_routes", f"Feil i GET /sensors/environment/logging: {str(e)}")
./routes/api/sensor_routes.py:128: logger.log_error("sensor_routes", f"Feil i POST /sensors/environment/logging: {str(e)}") => logger.get_logger("sensor_routes", f"Feil i POST /sensors/environment/logging: {str(e).error("sensor_routes", f"Feil i POST /sensors/environment/logging: {str(e)}")
./monitor/sensor_monitor_task.py:4: from utils.garage_logger import get_logger => # Fjernet gammel import
./monitor/sensor_monitor_task.py:14: logger.log_status("SensorMonitor", "Starter sensor-overvåking...") => logger.get_logger("SensorMonitor", "Starter sensor-overvåking...").info("SensorMonitor", "Starter sensor-overvåking...")
./monitor/sensor_monitor_task.py:23: logger.log_sensor_data(sid, msg) => logger.get_logger(sid, msg).info(sid, msg)
./monitor/sensor_monitor_task.py:26: logger.log_status("SensorMonitor", "Overvåking avsluttet manuelt") => logger.get_logger("SensorMonitor", "Overvåking avsluttet manuelt").info("SensorMonitor", "Overvåking avsluttet manuelt")
./monitor/sensor_monitor_task.py:28: logger.log_error("SensorMonitor", f"Uventet feil: {str(e)}") => logger.get_logger("SensorMonitor", f"Uventet feil: {str(e).error("SensorMonitor", f"Uventet feil: {str(e)}")
./monitor/system_monitor_task.py:7: from utils.garage_logger import GarageLogger => # Fjernet gammel import
./monitor/system_monitor_task.py:21: logger.log_status("system_monitor", f"Statussjekk OK: {status}") => logger.get_logger("system_monitor", f"Statussjekk OK: {status}").info("system_monitor", f"Statussjekk OK: {status}")
./monitor/system_monitor_task.py:24: logger.log_error("system_monitor", f"Feil i monitor-task: {e}") => logger.get_logger("system_monitor", f"Feil i monitor-task: {e}").error("system_monitor", f"Feil i monitor-task: {e}")
./core/garage_controller.py:8: from utils.garage_logger import GarageLogger => # Fjernet gammel import
./core/garage_controller.py:83: self.logger.log_status("controller", f"Init status port {port}: {self.status[port]}") => self.logger.get_logger("controller", f"Init status port {port}: {self.status[port]}").info("controller", f"Init status port {port}: {self.status[port]}")
./core/garage_controller.py:84: self.logger.log_status("sensor", f"{port} sensorstatus ved oppstart: {self.status[port]}") => self.logger.get_logger("sensor", f"{port} sensorstatus ved oppstart: {self.status[port]}").info("sensor", f"{port} sensorstatus ved oppstart: {self.status[port]}")
./core/garage_controller.py:100: self.logger.log_error("controller", f"Kunne ikke lagre systemkonfig: {e}") => self.logger.get_logger("controller", f"Kunne ikke lagre systemkonfig: {e}").error("controller", f"Kunne ikke lagre systemkonfig: {e}")
./core/garage_controller.py:117: self.logger.log_timing(port, direction, elapsed) => self.logger.get_logger(port, direction, elapsed).info(port, direction, elapsed)
./core/garage_controller.py:128: self.logger.log_action(port, "open", source="api") => self.logger.get_logger(port, "open", source="api").info(port, "open", source="api")
./core/garage_controller.py:142: self.logger.log_action(port, "close", source="api") => self.logger.get_logger(port, "close", source="api").info(port, "close", source="api")
./core/garage_controller.py:157: self.logger.log_action(port, "stop", source="api") => self.logger.get_logger(port, "stop", source="api").info(port, "stop", source="api")
./core/garage_controller.py:237: self.logger.log_error("timing", f"Feil i _update_timing_data: {e}") => self.logger.get_logger("timing", f"Feil i _update_timing_data: {e}").error("timing", f"Feil i _update_timing_data: {e}")
./core/garage_controller.py:249: self.logger.log_status(port, "Ingen sensorrespons – motor trolig ikke aktivert") => self.logger.get_logger(port, "Ingen sensorrespons – motor trolig ikke aktivert").info(port, "Ingen sensorrespons – motor trolig ikke aktivert")
./core/garage_controller.py:250: self.logger.log_error(port, "Puls sendt, men ingen sensor endret status") => self.logger.get_logger(port, "Puls sendt, men ingen sensor endret status").error(port, "Puls sendt, men ingen sensor endret status")
./core/garage_controller.py:258: self.logger.log_status(port, f"Port stoppet – delvis åpen (kilde: {source})") => self.logger.get_logger(port, f"Port stoppet – delvis åpen (kilde: {source}).info(port, f"Port stoppet – delvis åpen (kilde: {source})")
./core/garage_controller.py:259: self.logger.log_error(port, f"{port} | bevegelse ikke fullført innen forventet tid | kilde: {source}") => self.logger.get_logger(port, f"{port} | bevegelse ikke fullført innen forventet tid | kilde: {source}").error(port, f"{port} | bevegelse ikke fullført innen forventet tid | kilde: {source}")
./core/garage_controller.py:267: self.logger.log_status("sensor", f"{port} {sensor_type} sensor endret: level={level} @ {timestamp}") => self.logger.get_logger("sensor", f"{port} {sensor_type} sensor endret: level={level} @ {timestamp}").info("sensor", f"{port} {sensor_type} sensor endret: level={level} @ {timestamp}")
./core/garage_controller.py:270: self.logger.log_error("sensor", f"Ukjent port i callback: {port}") => self.logger.get_logger("sensor", f"Ukjent port i callback: {port}").error("sensor", f"Ukjent port i callback: {port}")
./core/garage_controller.py:282: self.logger.log_status("sensor", f"{port}: Manuell bevegelse? Ingen sensorer aktive.") => self.logger.get_logger("sensor", f"{port}: Manuell bevegelse? Ingen sensorer aktive.").info("sensor", f"{port}: Manuell bevegelse? Ingen sensorer aktive.")
./core/garage_controller.py:292: self.logger.log_debug("timing", f"{port}: movement_detected_time satt ({sensor_type} = 0)") => self.logger.get_logger("timing", f"{port}: movement_detected_time satt ({sensor_type} = 0).debug("timing", f"{port}: movement_detected_time satt ({sensor_type} = 0)")
./core/garage_controller.py:313: self.logger.log_status("status", f"{port} er nå {direction}") => self.logger.get_logger("status", f"{port} er nå {direction}").info("status", f"{port} er nå {direction}")
./core/garage_controller.py:330: self.logger.log_debug("controller", "Shutdown pågår – rydder opp rele og sensorer") => self.logger.get_logger("controller", "Shutdown pågår – rydder opp rele og sensorer").debug("controller", "Shutdown pågår – rydder opp rele og sensorer")
./core/garage_controller.py:335: self.logger.log_error("shutdown", f"Feil ved opprydding: {e}") => self.logger.get_logger("shutdown", f"Feil ved opprydding: {e}").error("shutdown", f"Feil ved opprydding: {e}")
./core/garage_controller.py:337: self.logger.log_debug("controller", "GarageController shutdown fullført.") => self.logger.get_logger("controller", "GarageController shutdown fullført.").debug("controller", "GarageController shutdown fullført.")
./core/bootstrap.py:20: logger.log_error("bootstrap", f"{description} mangler: {path}") => logger.get_logger("bootstrap", f"{description} mangler: {path}").error("bootstrap", f"{description} mangler: {path}")
./core/bootstrap.py:26: logger.log_error("bootstrap", f"{description} er ikke gyldig JSON: {path}") => logger.get_logger("bootstrap", f"{description} er ikke gyldig JSON: {path}").error("bootstrap", f"{description} er ikke gyldig JSON: {path}")
./core/bootstrap.py:41: logger.log_status("bootstrap", f"Verifisert mappe: {directory}") => logger.get_logger("bootstrap", f"Verifisert mappe: {directory}").info("bootstrap", f"Verifisert mappe: {directory}")
./core/bootstrap.py:60: logger.log_status("bootstrap", f"Tok sikkerhetskopi av {description} til {backup_path}") => logger.get_logger("bootstrap", f"Tok sikkerhetskopi av {description} til {backup_path}").info("bootstrap", f"Tok sikkerhetskopi av {description} til {backup_path}")
./core/bootstrap.py:66: logger.log_status("bootstrap", "pigpiod er allerede kjørende") => logger.get_logger("bootstrap", "pigpiod er allerede kjørende").info("bootstrap", "pigpiod er allerede kjørende")
./core/bootstrap.py:76: logger.log_status("bootstrap", "pigpiod startet OK") => logger.get_logger("bootstrap", "pigpiod startet OK").info("bootstrap", "pigpiod startet OK")
./core/bootstrap.py:78: logger.log_error("bootstrap", "FEIL: pigpiod kunne ikke startes – systemet vil sannsynligvis feile") => logger.get_logger("bootstrap", "FEIL: pigpiod kunne ikke startes – systemet vil sannsynligvis feile").error("bootstrap", "FEIL: pigpiod kunne ikke startes – systemet vil sannsynligvis feile")
./core/bootstrap.py:86: logger.log_status("bootstrap", f"Starter system – versjon: {version}") => logger.get_logger("bootstrap", f"Starter system – versjon: {version}").info("bootstrap", f"Starter system – versjon: {version}")
./core/bootstrap.py:110: logger.log_status("bootstrap", f"Skrev status til {status_path}") => logger.get_logger("bootstrap", f"Skrev status til {status_path}").info("bootstrap", f"Skrev status til {status_path}")
./core/bootstrap.py:114: logger.log_status("bootstrap", f"Starter system – versjon: {version}") => logger.get_logger("bootstrap", f"Starter system – versjon: {version}").info("bootstrap", f"Starter system – versjon: {version}")
./core/bootstrap.py:282: logger.log_status("bootstrap", "Starter systeminitialisering") => logger.get_logger("bootstrap", "Starter systeminitialisering").info("bootstrap", "Starter systeminitialisering")
./core/bootstrap.py:291: logger.log_status("bootstrap", "config_timing.json validert OK") => logger.get_logger("bootstrap", "config_timing.json validert OK").info("bootstrap", "config_timing.json validert OK")
./core/bootstrap.py:293: logger.log_error("bootstrap", f"Feil ved validering av config_timing.json: {e}") => logger.get_logger("bootstrap", f"Feil ved validering av config_timing.json: {e}").error("bootstrap", f"Feil ved validering av config_timing.json: {e}")
./core/bootstrap.py:299: logger.log_status("bootstrap", "config_system.json validert OK") => logger.get_logger("bootstrap", "config_system.json validert OK").info("bootstrap", "config_system.json validert OK")
./core/bootstrap.py:301: logger.log_error("bootstrap", f"Feil ved validering av config_system.json: {e}") => logger.get_logger("bootstrap", f"Feil ved validering av config_system.json: {e}").error("bootstrap", f"Feil ved validering av config_system.json: {e}")
./core/bootstrap.py:306: logger.log_status("bootstrap", "config_health.json validert OK") => logger.get_logger("bootstrap", "config_health.json validert OK").info("bootstrap", "config_health.json validert OK")
./core/bootstrap.py:308: logger.log_error("bootstrap", f"Validering av config_health.json feilet: {e}") => logger.get_logger("bootstrap", f"Validering av config_health.json feilet: {e}").error("bootstrap", f"Validering av config_health.json feilet: {e}")
./core/bootstrap.py:312: logger.log_status("bootstrap", "Systeminitialisering fullført") => logger.get_logger("bootstrap", "Systeminitialisering fullført").info("bootstrap", "Systeminitialisering fullført")
./core/bootstrap.py:316: logger.log_status("system_monitor", f"Systemstatus ved oppstart: {status}") => logger.get_logger("system_monitor", f"Systemstatus ved oppstart: {status}").info("system_monitor", f"Systemstatus ved oppstart: {status}")
./sensors/bme280_sensor.py:5: from utils.garage_logger import get_logger => # Fjernet gammel import
./sensors/bme280_sensor.py:24: logger.log_status(self.id, f"BME280Sensor initialisert @ 0x{self.address:02X} på bus {self.bus_number}") => logger.get_logger(self.id, f"BME280Sensor initialisert @ 0x{self.address:02X} på bus {self.bus_number}").info(self.id, f"BME280Sensor initialisert @ 0x{self.address:02X} på bus {self.bus_number}")
./sensors/bme280_sensor.py:26: logger.log_error(self.id, f"Klarte ikke å initialisere BME280: {e}") => logger.get_logger(self.id, f"Klarte ikke å initialisere BME280: {e}").error(self.id, f"Klarte ikke å initialisere BME280: {e}")
./sensors/bme280_sensor.py:57: logger.log_debug(self.id, f"Sensorverdier: {result}") => logger.get_logger(self.id, f"Sensorverdier: {result}").debug(self.id, f"Sensorverdier: {result}")
./sensors/bme280_sensor.py:60: logger.log_error(self.id, f"Feil ved lesing fra BME280: {e}") => logger.get_logger(self.id, f"Feil ved lesing fra BME280: {e}").error(self.id, f"Feil ved lesing fra BME280: {e}")
./sensors/environment_manager.py:8: from utils.garage_logger import get_logger => # Fjernet gammel import
./sensors/environment_manager.py:36: logger.log_status("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' er deaktivert i config") => logger.get_logger("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' er deaktivert i config").info("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' er deaktivert i config")
./sensors/environment_manager.py:44: logger.log_status("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' ({sensor_type}) lastet") => logger.get_logger("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' ({sensor_type}).info("EnvironmentSensorManager", f"Sensor '{sensor_conf['id']}' ({sensor_type}) lastet")
./sensors/environment_manager.py:47: logger.log_error("EnvironmentSensorManager", f"Feil ved sensor '{sensor_conf['id']}': {e}") => logger.get_logger("EnvironmentSensorManager", f"Feil ved sensor '{sensor_conf['id']}': {e}").error("EnvironmentSensorManager", f"Feil ved sensor '{sensor_conf['id']}': {e}")
./sensors/environment_manager.py:49: logger.log_error("EnvironmentSensorManager", f"Ukjent sensortype: {sensor_type}") => logger.get_logger("EnvironmentSensorManager", f"Ukjent sensortype: {sensor_type}").error("EnvironmentSensorManager", f"Ukjent sensortype: {sensor_type}")
./sensors/environment_manager.py:51: logger.log_error("EnvironmentSensorManager", f"Feil ved lasting av sensorkonfigurasjon: {e}") => logger.get_logger("EnvironmentSensorManager", f"Feil ved lasting av sensorkonfigurasjon: {e}").error("EnvironmentSensorManager", f"Feil ved lasting av sensorkonfigurasjon: {e}")
./sensors/environment_manager.py:60: logger.log_status("EnvironmentSensorManager", f"Averaging config lastet. log_interval: {self.log_interval}s") => logger.get_logger("EnvironmentSensorManager", f"Averaging config lastet. log_interval: {self.log_interval}s").info("EnvironmentSensorManager", f"Averaging config lastet. log_interval: {self.log_interval}s")
./sensors/environment_manager.py:62: logger.log_error("EnvironmentSensorManager", f"Feil ved lasting av averaging config: {e}") => logger.get_logger("EnvironmentSensorManager", f"Feil ved lasting av averaging config: {e}").error("EnvironmentSensorManager", f"Feil ved lasting av averaging config: {e}")
./sensors/environment_manager.py:103: logger.log_status("EnvironmentSensorManager", f"Lagret siste sensorverdier til {self.status_file}") => logger.get_logger("EnvironmentSensorManager", f"Lagret siste sensorverdier til {self.status_file}").info("EnvironmentSensorManager", f"Lagret siste sensorverdier til {self.status_file}")
./sensors/environment_manager.py:105: logger.log_error("EnvironmentSensorManager", f"Feil ved skriving av sensorstatus: {e}") => logger.get_logger("EnvironmentSensorManager", f"Feil ved skriving av sensorstatus: {e}").error("EnvironmentSensorManager", f"Feil ved skriving av sensorstatus: {e}")
./sensors/environment_manager.py:109: logger.log_status("EnvironmentSensorManager", f"Logging {'aktivert' if enabled else 'deaktivert'}") => logger.get_logger("EnvironmentSensorManager", f"Logging {'aktivert' if enabled else 'deaktivert'}").info("EnvironmentSensorManager", f"Logging {'aktivert' if enabled else 'deaktivert'}")
./sensors/environment_manager.py:116: logger.log_status("EnvironmentSensorManager", f"Oppdatert loggeintervall til {seconds} sekunder") => logger.get_logger("EnvironmentSensorManager", f"Oppdatert loggeintervall til {seconds} sekunder").info("EnvironmentSensorManager", f"Oppdatert loggeintervall til {seconds} sekunder")
./sensors/environment_manager.py:148: logger.log_status("EnvironmentSensorManager", f"Lagret timelig snitt for {len(hour_summary)} sensorer") => logger.get_logger("EnvironmentSensorManager", f"Lagret timelig snitt for {len(hour_summary).info("EnvironmentSensorManager", f"Lagret timelig snitt for {len(hour_summary)} sensorer")
./sensors/environment_manager.py:150: logger.log_error("EnvironmentSensorManager", f"Feil ved skriving av snitt: {e}") => logger.get_logger("EnvironmentSensorManager", f"Feil ved skriving av snitt: {e}").error("EnvironmentSensorManager", f"Feil ved skriving av snitt: {e}")
FJERNET: utils/garage_logger.py
FJERNET: utils/logger_factory.py
FJERNET: utils/log_utils.py
